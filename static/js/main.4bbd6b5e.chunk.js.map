{"version":3,"sources":["components/TodoItem.js","components/Todos.js","components/AddTodo.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","_this$props$todo","this","props","todo","id","title","color","completed","react_default","a","createElement","style","textDecoration","backgroundColor","padding","fontSize","type","onChange","markComplete","bind","checked","onClick","delTodo","btnStyle","Component","background","border","borderRadius","cursor","float","Todos","_this","todos","map","components_TodoItem","key","AddTodo","state","handleChange","e","setState","target","value","handleSubmit","preventDefault","addTodo","onSubmit","className","name","placeholder","required","App","uuid","v4","Object","toConsumableArray","filter","newTodo","Math","floor","random","toString","concat","objectSpread","_this2","components_AddTodo","components_Todos","alldone","listClear","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4bbd6b5e.chunk.js","sourcesContent":["/**\r\n * @Author: Ali\r\n * @Date:   2019-01-05T09:25:48+01:00\r\n * @Last modified by:   Ali\r\n * @Last modified time: 2019-01-06T16:04:29+01:00\r\n */\r\nimport React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass TodoItem extends Component {\r\n  render() {\r\n    const { id, title, color, completed } = this.props.todo;\r\n    return (\r\n      <div\r\n        style={{\r\n          textDecoration: completed ? \"line-through\" : \"none\",\r\n          backgroundColor: color,\r\n          padding: \"10px\",\r\n          fontSize: \"20px\"\r\n        }}\r\n      >\r\n        <p>\r\n          <input\r\n            type=\"checkbox\"\r\n            onChange={this.props.markComplete.bind(this, id)}\r\n            checked={completed}\r\n          />\r\n          {\"  \"}\r\n          {title}\r\n          <button onClick={this.props.delTodo.bind(this, id)} style={btnStyle}>\r\n            {\" \"}\r\n            X{\" \"}\r\n          </button>\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nTodoItem.propTypes = {\r\n  todo: PropTypes.object.isRequired\r\n};\r\nconst btnStyle = {\r\n  background: \"#ff0000\",\r\n  color: \"#fff\",\r\n  border: \"none\",\r\n  padding: \"5px 10px\",\r\n  borderRadius: \"50%\",\r\n  cursor: \"pointer\",\r\n  float: \"right\"\r\n};\r\nexport default TodoItem;\r\n","/**\r\n * @Author: Ali\r\n * @Date:   2019-01-05T09:16:28+01:00\r\n * @Last modified by:   Ali\r\n * @Last modified time: 2019-01-06T14:09:29+01:00\r\n */\r\nimport React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport TodoItem from \"./TodoItem\";\r\n\r\nclass Todos extends Component {\r\n  render() {\r\n    return this.props.todos.map(todo => (\r\n      <TodoItem\r\n        key={todo.id}\r\n        todo={todo}\r\n        delTodo={this.props.delTodo}\r\n        markComplete={this.props.markComplete}\r\n      />\r\n    ));\r\n  }\r\n}\r\nTodos.propTypes = {\r\n  todos: PropTypes.array.isRequired,\r\n  delTodo: PropTypes.func.isRequired,\r\n  markComplete: PropTypes.func.isRequired\r\n};\r\nexport default Todos;\r\n","/**\r\n * @Author: Ali\r\n * @Date:   2019-01-06T10:08:49+01:00\r\n * @Last modified by:   Ali\r\n * @Last modified time: 2019-01-06T15:45:17+01:00\r\n */\r\nimport React, { Component } from \"react\";\r\n\r\nclass AddTodo extends Component {\r\n  state = {\r\n    title: \"\"\r\n  };\r\n  handleChange = e => this.setState({ title: e.target.value });\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.addTodo(this.state.title);\r\n    this.setState({ title: \"\" });\r\n  };\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <input\r\n          className=\"input\"\r\n          type=\"text\"\r\n          name=\"title\"\r\n          placeholder=\"Create new Todo ...\"\r\n          value={this.state.title}\r\n          onChange={this.handleChange}\r\n          required\r\n        />\r\n        <button className=\"addButton\"> Add to List </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\nexport default AddTodo;\r\n","/**\n * @Author: Ali\n * @Date:   2019-01-05T09:14:04+01:00\n * @Last modified by:   Ali\n * @Last modified time: 2019-01-06T15:10:27+01:00\n */\n\nimport React, { Component } from \"react\";\nimport \"./App.css\";\nimport Todos from \"./components/Todos\";\nimport AddTodo from \"./components/AddTodo\";\nimport uuid from \"uuid\";\nclass App extends Component {\n  state = {\n    todos: [\n      {\n        id: uuid.v4(),\n        title: \"Learn about local Storage\",\n        completed: false,\n        color: \"#e67e22\"\n      },\n      {\n        id: uuid.v4(),\n        title: \"Do more CSS\",\n        completed: false,\n        color: \"#95a5a6\"\n      },\n      {\n        id: uuid.v4(),\n        title: \"Update old projects\",\n        completed: false,\n        color: \"#f1c40f\"\n      },\n      {\n        id: uuid.v4(),\n        title: \"Deploy finished Apps\",\n        completed: false,\n        color: \"#58B19F\"\n      }\n    ]\n  };\n\n  //Toggle Todo\n  markComplete = id => {\n    this.setState({\n      todos: this.state.todos.map(todo => {\n        if (todo.id === id) {\n          todo.completed = !todo.completed;\n        }\n        return todo;\n      })\n    });\n  };\n  //Delete Todo\n  delTodo = id => {\n    this.setState({\n      todos: [...this.state.todos.filter(todo => todo.id !== id)]\n    });\n  };\n  //Add ToDo\n  addTodo = title => {\n    const newTodo = {\n      id: uuid.v4(),\n      title,\n      completed: false,\n      color: \"#\" + Math.floor(Math.random() * 16777215).toString(16)\n    };\n    this.setState({ todos: [...this.state.todos, newTodo] });\n  };\n\n  listClear() {\n    this.setState({ todos: [] });\n  }\n  alldone() {\n    const todos = this.state.todos.map(todo => {\n      return {\n        ...todo,\n        completed: true\n      };\n    });\n    this.setState({\n      todos\n    });\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <div className=\"toptitle\"> Enhance Your Productivity </div>\n          <AddTodo addTodo={this.addTodo} />\n          <div className=\"todos\">\n            <Todos\n              todos={this.state.todos}\n              delTodo={this.delTodo}\n              markComplete={this.markComplete}\n            />\n          </div>\n          <button className=\"myButton\" onClick={() => this.alldone()}>\n            {\" \"}\n            Check all Done{\" \"}\n          </button>\n          <button className=\"myButton\" onClick={() => this.listClear()}>\n            {\" \"}\n            Clear the List{\" \"}\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/**\n * @Author: Ali\n * @Date:   2019-01-05T09:13:44+01:00\n * @Last modified by:   Ali\n * @Last modified time: 2019-01-05T09:13:44+01:00\n */\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}